//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    dashboard(body: string[] | undefined, cancelToken?: CancelToken): Promise<DashboardDataDto> {
        let url_ = this.baseUrl + "/api/dashboard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDashboard(_response);
        });
    }

    protected processDashboard(response: AxiosResponse): Promise<DashboardDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DashboardDataDto.fromJS(resultData200);
            return Promise.resolve<DashboardDataDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardDataDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pix(body: PaymentPixRequestDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/payment/pix";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPix(_response);
        });
    }

    protected processPix(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    boleto(body: PaymentBankSlipRequestDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/payment/boleto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBoleto(_response);
        });
    }

    protected processBoleto(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    credit(body: PaymentCreditCardRequestDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/payment/card/credit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCredit(_response);
        });
    }

    protected processCredit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    pdf(id: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/payment/boleto/{Id}/pdf";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPdf(_response);
        });
    }

    protected processPdf(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BarChartDataDto implements IBarChartDataDto {
    day?: string | undefined;
    count?: number;

    constructor(data?: IBarChartDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.day = _data["day"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): BarChartDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new BarChartDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day;
        data["count"] = this.count;
        return data;
    }
}

export interface IBarChartDataDto {
    day?: string | undefined;
    count?: number;
}

export class BillingAddress implements IBillingAddress {
    street?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    district?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;

    constructor(data?: IBillingAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.number = _data["number"];
            this.complement = _data["complement"];
            this.district = _data["district"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
            this.postalCode = _data["postalCode"];
        }
    }

    static fromJS(data: any): BillingAddress {
        data = typeof data === 'object' ? data : {};
        let result = new BillingAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["number"] = this.number;
        data["complement"] = this.complement;
        data["district"] = this.district;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        return data;
    }
}

export interface IBillingAddress {
    street?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    district?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    postalCode?: string | undefined;
}

export class BillingAddressDto implements IBillingAddressDto {
    street?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    district?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;

    constructor(data?: IBillingAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.number = _data["number"];
            this.complement = _data["complement"];
            this.district = _data["district"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
        }
    }

    static fromJS(data: any): BillingAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new BillingAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["number"] = this.number;
        data["complement"] = this.complement;
        data["district"] = this.district;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        return data;
    }
}

export interface IBillingAddressDto {
    street?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    district?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
}

export class Card implements ICard {
    cardNumber?: string | undefined;
    cardBrand?: string | undefined;
    expirationYear?: string | undefined;
    expirationMonth?: string | undefined;
    securityCode?: string | undefined;
    cardHolderName?: string | undefined;

    constructor(data?: ICard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cardNumber = _data["cardNumber"];
            this.cardBrand = _data["cardBrand"];
            this.expirationYear = _data["expirationYear"];
            this.expirationMonth = _data["expirationMonth"];
            this.securityCode = _data["securityCode"];
            this.cardHolderName = _data["cardHolderName"];
        }
    }

    static fromJS(data: any): Card {
        data = typeof data === 'object' ? data : {};
        let result = new Card();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardNumber"] = this.cardNumber;
        data["cardBrand"] = this.cardBrand;
        data["expirationYear"] = this.expirationYear;
        data["expirationMonth"] = this.expirationMonth;
        data["securityCode"] = this.securityCode;
        data["cardHolderName"] = this.cardHolderName;
        return data;
    }
}

export interface ICard {
    cardNumber?: string | undefined;
    cardBrand?: string | undefined;
    expirationYear?: string | undefined;
    expirationMonth?: string | undefined;
    securityCode?: string | undefined;
    cardHolderName?: string | undefined;
}

export class Customer implements ICustomer {
    id?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    documentType?: string | undefined;
    document?: string | undefined;
    phoneNumber?: string | undefined;
    billingAddress?: BillingAddress;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.name = _data["name"];
            this.documentType = _data["documentType"];
            this.document = _data["document"];
            this.phoneNumber = _data["phoneNumber"];
            this.billingAddress = _data["billingAddress"] ? BillingAddress.fromJS(_data["billingAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["name"] = this.name;
        data["documentType"] = this.documentType;
        data["document"] = this.document;
        data["phoneNumber"] = this.phoneNumber;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomer {
    id?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    documentType?: string | undefined;
    document?: string | undefined;
    phoneNumber?: string | undefined;
    billingAddress?: BillingAddress;
}

export class CustomerDto implements ICustomerDto {
    id?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    documentType?: string | undefined;
    documentNumber?: string | undefined;
    billingAddress?: BillingAddressDto;

    constructor(data?: ICustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.documentType = _data["documentType"];
            this.documentNumber = _data["documentNumber"];
            this.billingAddress = _data["billingAddress"] ? BillingAddressDto.fromJS(_data["billingAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["documentType"] = this.documentType;
        data["documentNumber"] = this.documentNumber;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomerDto {
    id?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    documentType?: string | undefined;
    documentNumber?: string | undefined;
    billingAddress?: BillingAddressDto;
}

export class DashboardDataDto implements IDashboardDataDto {
    barChartData?: BarChartDataDto[] | undefined;
    pieChartData?: PieChartDataDto[] | undefined;
    lineChartDotsData?: LineChartDataDto[] | undefined;
    lineChartData?: LineChartDataDto[] | undefined;
    overviewData?: OverviewDataDto;

    constructor(data?: IDashboardDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["barChartData"])) {
                this.barChartData = [] as any;
                for (let item of _data["barChartData"])
                    this.barChartData!.push(BarChartDataDto.fromJS(item));
            }
            if (Array.isArray(_data["pieChartData"])) {
                this.pieChartData = [] as any;
                for (let item of _data["pieChartData"])
                    this.pieChartData!.push(PieChartDataDto.fromJS(item));
            }
            if (Array.isArray(_data["lineChartDotsData"])) {
                this.lineChartDotsData = [] as any;
                for (let item of _data["lineChartDotsData"])
                    this.lineChartDotsData!.push(LineChartDataDto.fromJS(item));
            }
            if (Array.isArray(_data["lineChartData"])) {
                this.lineChartData = [] as any;
                for (let item of _data["lineChartData"])
                    this.lineChartData!.push(LineChartDataDto.fromJS(item));
            }
            this.overviewData = _data["overviewData"] ? OverviewDataDto.fromJS(_data["overviewData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DashboardDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.barChartData)) {
            data["barChartData"] = [];
            for (let item of this.barChartData)
                data["barChartData"].push(item.toJSON());
        }
        if (Array.isArray(this.pieChartData)) {
            data["pieChartData"] = [];
            for (let item of this.pieChartData)
                data["pieChartData"].push(item.toJSON());
        }
        if (Array.isArray(this.lineChartDotsData)) {
            data["lineChartDotsData"] = [];
            for (let item of this.lineChartDotsData)
                data["lineChartDotsData"].push(item.toJSON());
        }
        if (Array.isArray(this.lineChartData)) {
            data["lineChartData"] = [];
            for (let item of this.lineChartData)
                data["lineChartData"].push(item.toJSON());
        }
        data["overviewData"] = this.overviewData ? this.overviewData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDashboardDataDto {
    barChartData?: BarChartDataDto[] | undefined;
    pieChartData?: PieChartDataDto[] | undefined;
    lineChartDotsData?: LineChartDataDto[] | undefined;
    lineChartData?: LineChartDataDto[] | undefined;
    overviewData?: OverviewDataDto;
}

export class LineChartDataDto implements ILineChartDataDto {
    date?: Date;
    pix?: number;
    credit?: number;
    bankSlip?: number;
    totalAmount?: number;

    constructor(data?: ILineChartDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.pix = _data["pix"];
            this.credit = _data["credit"];
            this.bankSlip = _data["bankSlip"];
            this.totalAmount = _data["totalAmount"];
        }
    }

    static fromJS(data: any): LineChartDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new LineChartDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["pix"] = this.pix;
        data["credit"] = this.credit;
        data["bankSlip"] = this.bankSlip;
        data["totalAmount"] = this.totalAmount;
        return data;
    }
}

export interface ILineChartDataDto {
    date?: Date;
    pix?: number;
    credit?: number;
    bankSlip?: number;
    totalAmount?: number;
}

export class Order implements IOrder {
    id?: string | undefined;
    productType?: string | undefined;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productType = _data["productType"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productType"] = this.productType;
        return data;
    }
}

export interface IOrder {
    id?: string | undefined;
    productType?: string | undefined;
}

export class OverviewDataDto implements IOverviewDataDto {
    approvedAmount?: number;
    approvedCount?: number;
    rejectedAmount?: number;
    rejectedCount?: number;
    cancelledAmount?: number;
    cancelledCount?: number;
    pendingAmount?: number;
    pendingCount?: number;

    constructor(data?: IOverviewDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.approvedAmount = _data["approvedAmount"];
            this.approvedCount = _data["approvedCount"];
            this.rejectedAmount = _data["rejectedAmount"];
            this.rejectedCount = _data["rejectedCount"];
            this.cancelledAmount = _data["cancelledAmount"];
            this.cancelledCount = _data["cancelledCount"];
            this.pendingAmount = _data["pendingAmount"];
            this.pendingCount = _data["pendingCount"];
        }
    }

    static fromJS(data: any): OverviewDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new OverviewDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["approvedAmount"] = this.approvedAmount;
        data["approvedCount"] = this.approvedCount;
        data["rejectedAmount"] = this.rejectedAmount;
        data["rejectedCount"] = this.rejectedCount;
        data["cancelledAmount"] = this.cancelledAmount;
        data["cancelledCount"] = this.cancelledCount;
        data["pendingAmount"] = this.pendingAmount;
        data["pendingCount"] = this.pendingCount;
        return data;
    }
}

export interface IOverviewDataDto {
    approvedAmount?: number;
    approvedCount?: number;
    rejectedAmount?: number;
    rejectedCount?: number;
    cancelledAmount?: number;
    cancelledCount?: number;
    pendingAmount?: number;
    pendingCount?: number;
}

export class PaymentBankSlipRequestDto implements IPaymentBankSlipRequestDto {
    amount?: number;
    orderId?: string | undefined;
    customer?: CustomerDto;

    constructor(data?: IPaymentBankSlipRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.orderId = _data["orderId"];
            this.customer = _data["customer"] ? CustomerDto.fromJS(_data["customer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentBankSlipRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentBankSlipRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["orderId"] = this.orderId;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPaymentBankSlipRequestDto {
    amount?: number;
    orderId?: string | undefined;
    customer?: CustomerDto;
}

export class PaymentCreditCardRequestDto implements IPaymentCreditCardRequestDto {
    amount?: number;
    card?: Card;
    customer?: Customer;
    order?: Order;

    constructor(data?: IPaymentCreditCardRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.card = _data["card"] ? Card.fromJS(_data["card"]) : <any>undefined;
            this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : <any>undefined;
            this.order = _data["order"] ? Order.fromJS(_data["order"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentCreditCardRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentCreditCardRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["card"] = this.card ? this.card.toJSON() : <any>undefined;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPaymentCreditCardRequestDto {
    amount?: number;
    card?: Card;
    customer?: Customer;
    order?: Order;
}

export class PaymentPixRequestDto implements IPaymentPixRequestDto {
    amount?: number;
    orderId?: string | undefined;
    customerId?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    document?: string | undefined;
    documentType?: string | undefined;

    constructor(data?: IPaymentPixRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.orderId = _data["orderId"];
            this.customerId = _data["customerId"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.document = _data["document"];
            this.documentType = _data["documentType"];
        }
    }

    static fromJS(data: any): PaymentPixRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentPixRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["orderId"] = this.orderId;
        data["customerId"] = this.customerId;
        data["name"] = this.name;
        data["email"] = this.email;
        data["document"] = this.document;
        data["documentType"] = this.documentType;
        return data;
    }
}

export interface IPaymentPixRequestDto {
    amount?: number;
    orderId?: string | undefined;
    customerId?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    document?: string | undefined;
    documentType?: string | undefined;
}

export class PieChartDataDto implements IPieChartDataDto {
    paymentType?: string | undefined;
    count?: number;

    constructor(data?: IPieChartDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentType = _data["paymentType"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PieChartDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new PieChartDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentType"] = this.paymentType;
        data["count"] = this.count;
        return data;
    }
}

export interface IPieChartDataDto {
    paymentType?: string | undefined;
    count?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}